{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\tunahan.yilmaz\\\\Desktop\\\\react-app\\\\react-native-1\\\\globo\\\\App.js\";\nimport { AppLoading, SplashScreen, Updates } from 'expo';\nimport { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nSplashScreen.preventAutoHide();\nexport default function App() {\n  return React.createElement(AnimatedAppLoader, {\n    image: {\n      uri: Constants.manifest.splash.image\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, React.createElement(MainScreen, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction AnimatedAppLoader(_ref) {\n  var children = _ref.children,\n      image = _ref.image;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isSplashReady = _React$useState2[0],\n      setSplashReady = _React$useState2[1];\n\n  var startAsync = React.useMemo(function () {\n    return function () {\n      return Asset.fromURI(image).downloadAsync();\n    };\n  }, [image]);\n  var onFinish = React.useMemo(function () {\n    return setSplashReady(true);\n  }, []);\n\n  if (!isSplashReady) {\n    return React.createElement(AppLoading, {\n      startAsync: startAsync,\n      onError: console.error,\n      onFinish: onFinish,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(AnimatedSplashScreen, {\n    image: image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction AnimatedSplashScreen(_ref2) {\n  var children = _ref2.children,\n      image = _ref2.image;\n  var animation = React.useMemo(function () {\n    return new Animated.Value(1);\n  }, []);\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isAppReady = _React$useState4[0],\n      setAppReady = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isSplashAnimationComplete = _React$useState6[0],\n      setAnimationComplete = _React$useState6[1];\n\n  React.useEffect(function () {\n    if (isAppReady) {\n      Animated.timing(animation, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver: true\n      }).start(function () {\n        return setAnimationComplete(true);\n      });\n    }\n  }, [isAppReady]);\n  var onImageLoaded = React.useMemo(function () {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              SplashScreen.hide();\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Promise.all([]));\n\n            case 4:\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 8:\n              _context.prev = 8;\n              setAppReady(true);\n              return _context.finish(8);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 6, 8, 11]], Promise);\n    };\n  });\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, isAppReady && children, !isSplashAnimationComplete && React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, {\n      backgroundColor: Constants.manifest.splash.backgroundColor,\n      opacity: animation\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, React.createElement(Animated.Image, {\n    style: {\n      width: '100%',\n      height: '100%',\n      resizeMode: Constants.manifest.splash.resizeMode || 'contain',\n      transform: [{\n        scale: animation\n      }]\n    },\n    source: image,\n    onLoadEnd: onImageLoaded,\n    fadeDuration: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  })));\n}\n\nfunction MainScreen() {\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'plum',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'black',\n      fontSize: 30,\n      marginBottom: 15,\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Pretty Cool!\"), React.createElement(Button, {\n    title: \"Run Again\",\n    onPress: function onPress() {\n      return Updates.reload();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/tunahan.yilmaz/Desktop/react-app/react-native-1/globo/App.js"],"names":["AppLoading","SplashScreen","Updates","Asset","Constants","React","preventAutoHide","App","uri","manifest","splash","image","AnimatedAppLoader","children","useState","isSplashReady","setSplashReady","startAsync","useMemo","fromURI","downloadAsync","onFinish","console","error","AnimatedSplashScreen","animation","Animated","Value","isAppReady","setAppReady","isSplashAnimationComplete","setAnimationComplete","useEffect","timing","toValue","duration","useNativeDriver","start","onImageLoaded","hide","Promise","all","flex","StyleSheet","absoluteFill","backgroundColor","opacity","width","height","resizeMode","transform","scale","MainScreen","alignItems","justifyContent","color","fontSize","marginBottom","fontWeight","reload"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,YAArB,EAAmCC,OAAnC,QAAkD,MAAlD;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;;AAIAJ,YAAY,CAACK,eAAb;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,SACE,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAE;AAAEC,MAAAA,GAAG,EAAEJ,SAAS,CAACK,QAAV,CAAmBC,MAAnB,CAA0BC;AAAjC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,SAASC,iBAAT,OAAgD;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,MAATF,KAAS,QAATA,KAAS;;AAAA,wBACNN,KAAK,CAACS,QAAN,CAAe,KAAf,CADM;AAAA;AAAA,MACvCC,aADuC;AAAA,MACxBC,cADwB;;AAG9C,MAAMC,UAAU,GAAGZ,KAAK,CAACa,OAAN,CAEjB;AAAA,WAAM;AAAA,aAAMf,KAAK,CAACgB,OAAN,CAAcR,KAAd,EAAqBS,aAArB,EAAN;AAAA,KAAN;AAAA,GAFiB,EAGjB,CAACT,KAAD,CAHiB,CAAnB;AAMA,MAAMU,QAAQ,GAAGhB,KAAK,CAACa,OAAN,CAAc;AAAA,WAAMF,cAAc,CAAC,IAAD,CAApB;AAAA,GAAd,EAA0C,EAA1C,CAAjB;;AAEA,MAAI,CAACD,aAAL,EAAoB;AAClB,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEE,UADd;AAEE,MAAA,OAAO,EAAEK,OAAO,CAACC,KAFnB;AAGE,MAAA,QAAQ,EAAEF,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AAED,SACE,oBAAC,oBAAD;AAAsB,IAAA,KAAK,EAAEV,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,QADH,CADF;AAKD;;AAED,SAASW,oBAAT,QAAmD;AAAA,MAAnBX,QAAmB,SAAnBA,QAAmB;AAAA,MAATF,KAAS,SAATA,KAAS;AACjD,MAAMc,SAAS,GAAGpB,KAAK,CAACa,OAAN,CAAc;AAAA,WAAM,IAAIQ,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAN;AAAA,GAAd,EAA2C,EAA3C,CAAlB;;AADiD,yBAEftB,KAAK,CAACS,QAAN,CAAe,KAAf,CAFe;AAAA;AAAA,MAE1Cc,UAF0C;AAAA,MAE9BC,WAF8B;;AAAA,yBAGSxB,KAAK,CAACS,QAAN,CACxD,KADwD,CAHT;AAAA;AAAA,MAG1CgB,yBAH0C;AAAA,MAGfC,oBAHe;;AAOjD1B,EAAAA,KAAK,CAAC2B,SAAN,CAAgB,YAAM;AACpB,QAAIJ,UAAJ,EAAgB;AACdF,MAAAA,QAAQ,CAACO,MAAT,CAAgBR,SAAhB,EAA2B;AACzBS,QAAAA,OAAO,EAAE,CADgB;AAEzBC,QAAAA,QAAQ,EAAE,GAFe;AAGzBC,QAAAA,eAAe,EAAE;AAHQ,OAA3B,EAIGC,KAJH,CAIS;AAAA,eAAMN,oBAAoB,CAAC,IAAD,CAA1B;AAAA,OAJT;AAKD;AACF,GARD,EAQG,CAACH,UAAD,CARH;AAUA,MAAMU,aAAa,GAAGjC,KAAK,CAACa,OAAN,CAAc;AAAA,WAAM;AAAA;AAAA;AAAA;AAAA;AACxCjB,cAAAA,YAAY,CAACsC,IAAb;AADwC;AAAA;AAAA,+CAIhCC,OAAO,CAACC,GAAR,CAAY,EAAZ,CAJgC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAQtCZ,cAAAA,WAAW,CAAC,IAAD,CAAX;AARsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;AAAA,GAAd,CAAtB;AAYA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEa,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,UAAU,IAAIf,QADjB,EAEG,CAACiB,yBAAD,IACC,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,aAAa,EAAC,MADhB;AAEE,IAAA,KAAK,EAAE,CACLa,UAAU,CAACC,YADN,EAEL;AACEC,MAAAA,eAAe,EAAEzC,SAAS,CAACK,QAAV,CAAmBC,MAAnB,CAA0BmC,eAD7C;AAEEC,MAAAA,OAAO,EAAErB;AAFX,KAFK,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,QAAD,CAAU,KAAV;AACE,IAAA,KAAK,EAAE;AACLsB,MAAAA,KAAK,EAAE,MADF;AAELC,MAAAA,MAAM,EAAE,MAFH;AAGLC,MAAAA,UAAU,EAAE7C,SAAS,CAACK,QAAV,CAAmBC,MAAnB,CAA0BuC,UAA1B,IAAwC,SAH/C;AAILC,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,KAAK,EAAE1B;AADT,OADS;AAJN,KADT;AAWE,IAAA,MAAM,EAAEd,KAXV;AAYE,IAAA,SAAS,EAAE2B,aAZb;AAaE,IAAA,YAAY,EAAE,CAbhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CAHJ,CADF;AAgCD;;AAED,SAASc,UAAT,GAAsB;AACpB,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLV,MAAAA,IAAI,EAAE,CADD;AAELG,MAAAA,eAAe,EAAE,MAFZ;AAGLQ,MAAAA,UAAU,EAAE,QAHP;AAILC,MAAAA,cAAc,EAAE;AAJX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,OADF;AAELC,MAAAA,QAAQ,EAAE,EAFL;AAGLC,MAAAA,YAAY,EAAE,EAHT;AAILC,MAAAA,UAAU,EAAE;AAJP,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,EAgBE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,WAAd;AAA0B,IAAA,OAAO,EAAE;AAAA,aAAMxD,OAAO,CAACyD,MAAR,EAAN;AAAA,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CADF;AAoBD","sourcesContent":["import { AppLoading, SplashScreen, Updates } from 'expo';\nimport { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport React from 'react';\nimport { Animated, Button, StyleSheet, Text, View } from 'react-native';\n\n// Instruct SplashScreen not to hide yet, we want to do this manually\nSplashScreen.preventAutoHide();\n\nexport default function App() {\n  return (\n    <AnimatedAppLoader image={{ uri: Constants.manifest.splash.image }}>\n      <MainScreen />\n    </AnimatedAppLoader>\n  );\n}\n\nfunction AnimatedAppLoader({ children, image }) {\n  const [isSplashReady, setSplashReady] = React.useState(false);\n\n  const startAsync = React.useMemo(\n    // If you use a local image with require(...), use `Asset.fromModule`\n    () => () => Asset.fromURI(image).downloadAsync(),\n    [image]\n  );\n\n  const onFinish = React.useMemo(() => setSplashReady(true), []);\n\n  if (!isSplashReady) {\n    return (\n      <AppLoading\n        startAsync={startAsync}\n        onError={console.error}\n        onFinish={onFinish}\n      />\n    );\n  }\n\n  return (\n    <AnimatedSplashScreen image={image}>\n      {children}\n    </AnimatedSplashScreen>\n  );\n}\n\nfunction AnimatedSplashScreen({ children, image }) {\n  const animation = React.useMemo(() => new Animated.Value(1), []);\n  const [isAppReady, setAppReady] = React.useState(false);\n  const [isSplashAnimationComplete, setAnimationComplete] = React.useState(\n    false\n  );\n\n  React.useEffect(() => {\n    if (isAppReady) {\n      Animated.timing(animation, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver: true,\n      }).start(() => setAnimationComplete(true));\n    }\n  }, [isAppReady]);\n\n  const onImageLoaded = React.useMemo(() => async () => {\n    SplashScreen.hide();\n    try {\n      // Load stuff\n      await Promise.all([]);\n    } catch (e) {\n      // handle errors\n    } finally {\n      setAppReady(true);\n    }\n  });\n\n  return (\n    <View style={{ flex: 1 }}>\n      {isAppReady && children}\n      {!isSplashAnimationComplete && (\n        <Animated.View\n          pointerEvents=\"none\"\n          style={[\n            StyleSheet.absoluteFill,\n            {\n              backgroundColor: Constants.manifest.splash.backgroundColor,\n              opacity: animation,\n            },\n          ]}>\n          <Animated.Image\n            style={{\n              width: '100%',\n              height: '100%',\n              resizeMode: Constants.manifest.splash.resizeMode || 'contain',\n              transform: [\n                {\n                  scale: animation,\n                },\n              ],\n            }}\n            source={image}\n            onLoadEnd={onImageLoaded}\n            fadeDuration={0}\n          />\n        </Animated.View>\n      )}\n    </View>\n  );\n}\n\nfunction MainScreen() {\n  return (\n    <View\n      style={{\n        flex: 1,\n        backgroundColor: 'plum',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}>\n      <Text\n        style={{\n          color: 'black',\n          fontSize: 30,\n          marginBottom: 15,\n          fontWeight: 'bold',\n        }}>\n        Pretty Cool!\n      </Text>\n      <Button title=\"Run Again\" onPress={() => Updates.reload()} />\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}